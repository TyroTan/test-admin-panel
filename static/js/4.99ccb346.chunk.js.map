{"version":3,"sources":["config/constants.ts","services/BackendFactory.ts","services/backend.ts","containers/LoginForm.tsx"],"names":["apiURL","process","empty","bf","opts","req","timeout","headers","this","options","resource","query","Authorization","baseUrl","API_URL","queryUrl","queryString","stringify","queryUrlFull","axios","create","get","then","res","data","post","put","delete","extraHeaders","Object","keys","forEach","header","patch","sendPost","Obj","a","getCurrentSession","authed","moreOptions","token","postRequest","loginPOST","Wrapper","styled","div","Content","PanelTitle","Panel","Title","LoginForm","props","state","email","password","loading","onChangeEmail","bind","onChangePassword","onSubmit","e","setState","target","value","preventDefault","result","console","log","setCurrentSession","window","location","href","response","msg","alert","bsStyle","Heading","componentClass","Body","id","type","label","placeholder","onChange","Button","className","React","Component","FieldGroup","help","FormGroup","controlId","ControlLabel","FormControl","HelpBlock"],"mappings":"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","file":"static/js/4.99ccb346.chunk.js","sourcesContent":["const apiURL = process.env.REACT_APP_API_URL;\n\nexport default apiURL;\nexport { apiURL };\n","import queryString from 'query-string';\nimport { apiURL as API_URL } from 'config/constants';\nimport axios from 'axios';\nimport getCurrentSession from 'utils';\n\nconst empty = {};\n\nconst TOKEN_AUTH_PREFIX = `Token `;\nexport default class BackendFactoryClass {\n  public req: BackendFactoryRequest;\n  public constructor(opts = empty as BackendFactory) {\n    const { timeout = 25000 } = opts;\n    const headers: IHeaders = {};\n\n    // if (csrf) {\n    //   headers._csrf = csrf;\n    // }\n\n    this.req = {\n      timeout,\n      headers,\n    };\n  }\n\n  public getRequest<R>(options: RequestAxiosGET): Promise<APIResponse<R>> {\n    const { resource = '', query = null, Authorization = '' } = options;\n    this.req.baseUrl = `${API_URL}/${resource}`;\n\n    if (Authorization) {\n      this.req.headers.Authorization = `${TOKEN_AUTH_PREFIX}${Authorization}`;\n    }\n\n    // console.log('osow!', query);\n    const queryUrl = query ? queryString.stringify(query) : '';\n\n    const queryUrlFull = queryUrl ? `?${queryUrl}` : '';\n\n    // console.log(\n    //   `${this.req.baseUrl}${queryUrlFull}`,\n    //   'getRequest this.req',\n    //   queryUrlFull\n    // );\n\n    return axios\n      .create(this.req)\n      .get(`${this.req.baseUrl}${queryUrlFull}`)\n      .then((res) => res.data);\n  }\n\n  public postRequest<R>(options: RequestAxiosPOST): Promise<APIResponse<R>> {\n    const { resource = '', data, Authorization = '' } = options;\n    this.req.baseUrl = `${API_URL}/${resource}`;\n    this.req.headers['Content-Type'] = 'application/json';\n    // this.req.headers.accept = 'application/json';\n\n    if (Authorization) {\n      this.req.headers.Authorization = `${TOKEN_AUTH_PREFIX}${Authorization}`;\n    }\n\n    // console.log('postRequest this.req', this.req.baseUrl, data);\n\n    return axios\n      .create(this.req)\n      .post(this.req.baseUrl, data)\n      .then((res) => {\n        return res.data;\n      });\n\n    // return axio.create(this.req)\n    // .post(this.req.baseUrl, data)\n    // return axios\n    // .post('https://qa.trovoai.com/api/v1/auth/login/', JSON.stringify(data), {\n    // 'Content-Type': 'application/json',\n    // })\n    // .then(res => {\n    // console.log('res.data!', res.data);\n    // return res.data;\n    // });\n  }\n\n  public putRequest<R>(options: RequestAxiosPOST): Promise<APIResponse<R>> {\n    const { resource = '', data, Authorization = '' } = options;\n    this.req.baseUrl = `${API_URL}/${resource}`;\n\n    if (Authorization) {\n      this.req.headers.Authorization = `${TOKEN_AUTH_PREFIX}${Authorization}`;\n    }\n\n    // console.log(\n    //   'PUTRequest this.req',\n    //   this.req,\n    //   this.req.baseUrl,\n    //   data,\n    //   options\n    // );\n\n    return axios\n      .create(this.req)\n      .put(this.req.baseUrl, data)\n      .then((res) => {\n        return res.data;\n      });\n  }\n\n  public deleteRequest<R>(options: RequestAxiosPOST): Promise<APIResponse<R>> {\n    const { resource = '', Authorization = '' } = options;\n    this.req.baseUrl = `${API_URL}/${resource}`;\n\n    if (Authorization) {\n      this.req.headers.Authorization = `${TOKEN_AUTH_PREFIX}${Authorization}`;\n    }\n\n    // console.log('DELETERequest this.req', this.req, this.req.baseUrl, options);\n\n    return axios\n      .create(this.req)\n      .delete(this.req.baseUrl)\n      .then((res) => {\n        return res.data;\n      });\n  }\n\n  public patchRequest<R>(options: RequestAxiosPOST): Promise<APIResponse<R>> {\n    const {\n      resource = '',\n      data,\n      extraHeaders = null,\n      Authorization = '',\n    } = options;\n    this.req.baseUrl = `${API_URL}/${resource}`;\n\n    if (Authorization) {\n      this.req.headers.Authorization = `${TOKEN_AUTH_PREFIX}${Authorization}`;\n    }\n    if (extraHeaders) {\n      Object.keys(extraHeaders).forEach((header) => {\n        // whitelist other headers here\n        if (header === 'Content-Type') {\n          this.req.headers[header] = `${extraHeaders[header]}`;\n        }\n      });\n    }\n\n    // console.log('patchinn', this.req, data);\n\n    return axios\n      .create(this.req)\n      .patch(this.req.baseUrl, data)\n      .then((res) => {\n        return res.data;\n      });\n  }\n\n  /*\n  putRequest(options = {}) {}\n\n  optionRequest(options = {}) {}\n  \n  */\n}\n\nconst bf = new BackendFactoryClass();\n\nexport async function sendGet<T>(\n  Obj: RequestAxiosGET,\n): Promise<APIResponse<T>> {\n  const authed = await getCurrentSession();\n  let moreOptions = Obj;\n  if (authed && authed.token) {\n    moreOptions = {\n      ...moreOptions,\n      Authorization: `${authed.token}`,\n    };\n  }\n\n  return bf.getRequest(moreOptions);\n}\n\nexport async function sendPost<T>(\n  Obj: RequestAxiosPOST,\n): Promise<APIResponse<T>> {\n  const authed = await getCurrentSession();\n\n  let moreOptions = Obj;\n  if (authed && authed.token) {\n    moreOptions = {\n      ...moreOptions,\n      Authorization: `${authed.token}`,\n    };\n  }\n\n  return bf.postRequest<T>(moreOptions);\n}\n\nexport async function sendNoAuthPost<T>(\n  Obj: RequestAxiosPOST,\n): Promise<APIResponse<T>> {\n  return bf.postRequest(Obj);\n}\n\nexport async function sendNoAuthGet<T>(\n  Obj: RequestAxiosGET,\n): Promise<APIResponse<T>> {\n  return bf.getRequest(Obj);\n}\n\nexport async function sendPut<T>(\n  putObj: RequestAxiosPOST,\n): Promise<APIResponse<T>> {\n  const authed = await getCurrentSession();\n  let moreOptions = putObj;\n  if (authed && authed.token) {\n    moreOptions = {\n      ...moreOptions,\n      Authorization: `${authed.token}`,\n    };\n  }\n\n  return bf.putRequest<T>(moreOptions);\n}\n\n/*\nexport async function sendDelete<T>(delObj: {}): Promise<APIResponse<T>> {\n  const authed = await getCurrentSession();\n  let moreOptions = delObj;\n  if (authed && authed.idToken) {\n    moreOptions = {\n      ...moreOptions,\n      Authorization: `${authed.idToken}`,\n    };\n  }\n\n  return bf.deleteRequest<T>(moreOptions);\n}\n*/\n\nexport function sendPatch<R>(Obj: RequestAxiosPOST): Promise<APIResponse<R>> {\n  return bf.patchRequest<R>(Obj);\n}\n\n/* export function sendDelete(Obj) {\n  return bf.deleteRequest(Obj);\n}\n\n\nexport function sendOption(Obj) {\n  return bf.optionRequest(Obj);\n} */\n","import { sendGet, sendPost } from 'services/BackendFactory';\nimport { AxiosResponse } from 'axios';\n\nconst usersGET = async (opts: Request): Promise<Response> => {\n  return sendGet({\n    resource: `users`,\n    ...opts,\n  });\n};\n\nconst loginPOST = async (\n  opts: RequestPOST<{\n    email: string;\n    password: string;\n  }>,\n): Promise<UserData> => {\n  return sendPost({\n    resource: `auth/login`,\n    ...opts,\n  });\n};\n\nexport default usersGET;\nexport { usersGET, loginPOST };\n","import React from 'react';\nimport {\n  Panel,\n  FormGroup,\n  ControlLabel,\n  FormControl,\n  HelpBlock,\n  Button,\n} from 'react-bootstrap';\nimport styled from 'styled-components';\nimport { loginPOST } from 'services/backend';\nimport { setCurrentSession } from 'utils';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n`;\n\nconst Content = styled.div`\n  height: 400px;\n  width: 400px;\n`;\n\nconst PanelTitle = styled(Panel.Title)`\n  text-align: center;\n  font-weight: bold;\n`;\n\ninterface State {\n  email: string;\n  password: string;\n  loading: boolean;\n}\n\nclass LoginForm extends React.Component<{}, State> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      email: '',\n      password: '',\n      loading: false,\n    };\n\n    this.onChangeEmail = this.onChangeEmail.bind(this);\n    this.onChangePassword = this.onChangePassword.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onChangeEmail(e: React.ChangeEvent<HTMLInputElement>): void {\n    this.setState({ email: e.target.value });\n  }\n\n  onChangePassword(e: React.ChangeEvent<HTMLInputElement>): void {\n    this.setState({ password: e.target.value });\n  }\n\n  async onSubmit(e: React.FormEvent): Promise<void> {\n    e.preventDefault();\n    const { email, password } = this.state;\n    try {\n      const result = await loginPOST({\n        data: {\n          email,\n          password,\n        },\n      });\n\n      console.log('resultresult', result);\n\n      if (result && result.token) {\n        setCurrentSession(result);\n        window.location.href = '/';\n        return;\n      }\n\n      this.setState({\n        loading: true,\n      });\n    } catch (e) {\n      this.setState({\n        loading: true,\n      });\n      if (e?.response?.data?.msg) {\n        alert(e?.response?.data?.msg);\n      }\n    }\n  }\n\n  render(): JSX.Element {\n    return (\n      <Wrapper>\n        <Content>\n          <Panel bsStyle=\"info\">\n            <Panel.Heading>\n              <PanelTitle componentClass=\"h3\">LOGIN</PanelTitle>\n            </Panel.Heading>\n            <Panel.Body>\n              <form onSubmit={this.onSubmit}>\n                <FieldGroup\n                  id=\"formControlsEmail\"\n                  type=\"email\"\n                  label=\"Email address\"\n                  placeholder=\"Enter email\"\n                  value={this.state.email}\n                  onChange={this.onChangeEmail}\n                />\n                <FieldGroup\n                  id=\"formControlsPassword\"\n                  label=\"Password\"\n                  type=\"password\"\n                  value={this.state.password}\n                  onChange={this.onChangePassword}\n                />\n                <Button className=\"btn btn-primary\" type=\"submit\">\n                  Submit\n                </Button>\n              </form>\n            </Panel.Body>\n          </Panel>\n        </Content>\n      </Wrapper>\n    );\n  }\n}\n\nexport default LoginForm;\n\n/* eslint-disable-next-line react/prop-types */\nconst FieldGroup = ({\n  id,\n  label,\n  help = '',\n  ...props\n}: {\n  [x: string]: any;\n}): JSX.Element => {\n  return (\n    <FormGroup controlId={id}>\n      <ControlLabel>{label}</ControlLabel>\n      <FormControl {...props} />\n      {help && <HelpBlock>{help}</HelpBlock>}\n    </FormGroup>\n  );\n};\n"],"sourceRoot":""}